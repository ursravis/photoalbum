{"version":3,"file":"modal-context.js","sourceRoot":"","sources":["../../../src/components/angular2-modal/models/modal-context.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OAGnC,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,sBAAsB;OAClD,EAAE,cAAc,EAAE,qBAAqB,EAAE,MAAM,mBAAmB;AAEzE,OAAO,IAAM,cAAc,GAAG,EAAE,CAAC;AAEjC,IAAM,eAAe,GAAG;IACpB,SAAS;CACZ,CAAC;AAEF;IAAkC,gCAAc;IAAhD;QAAkC,8BAAc;IAOhD,CAAC;IAAD,mBAAC;AAAD,CAAC,AAPD,CAAkC,cAAc,GAO/C;AAED;;;GAGG;AAEH;IAAiE,uCAAwB;IAQrF,6BACI,aAAkC,EAClC,cAAoC,EACpC,QAAiC;QAFjC,6BAAkC,GAAlC,yBAAkC;QAClC,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,MAAM,CAAM,cAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;IACN,CAAC;IACE,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kCAAc,GAA6D;QAClF,IAAI;QACJ,EAAC,IAAI,EAAE,KAAK,GAAG;QACf,IAAI;KACH,CAAC;IACF,0BAAC;AAAD,CAAC,AA5BD,CAAiE,qBAAqB,GA4BrF","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { OverlayContext, OverlayContextBuilder } from './overlay-context';\n\nexport const DEFAULT_VALUES = {};\n\nconst DEFAULT_SETTERS = [\n    'message'\n];\n\nexport class ModalContext extends OverlayContext {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: string;\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\n\nexport class ModalContextBuilder<T extends ModalContext> extends OverlayContextBuilder<T> {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    constructor(\n        defaultValues: T | T[] = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\nnull,\n{type: Array, },\nnull,\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}