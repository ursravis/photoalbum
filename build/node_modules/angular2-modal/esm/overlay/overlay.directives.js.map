{"version":3,"file":"overlay.directives.js","sourceRoot":"","sources":["../../../src/components/angular2-modal/overlay/overlay.directives.ts"],"names":[],"mappings":"OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,gBAAgB,EAEjB,MAAM,eAAe;OAEf,EAAE,SAAS,EAAE,MAAM,sBAAsB;OACzC,EAAE,UAAU,EAAE,MAAM,wBAAwB;OAC5C,EAAE,OAAO,EAAE,MAAM,mBAAmB;AAE3C;;;;GAIG;AAEH;IACE,+BAAY,EAAc,EAAE,SAAyB;QACnD,EAAE,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAClC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAEI,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,yBAAyB;iBACpC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,oCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,SAAS,GAAG;KAClB,CAAC;IACF,4BAAC;AAAD,CAAC,AAjBD,IAiBC;AAGD;IAUE,uBAAoB,KAAuB;QAAvB,UAAK,GAAL,KAAK,CAAkB;IAAG,CAAC;IAT9C,sBAAI,oCAAS;aAAb,UAAc,KAAa;YAC1B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;;;OAAA;IAMD,mCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,iBAAiB;iBAC5B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,CAAC;IACK,4BAAc,GAA2C;QAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAE;KACzD,CAAC;IACF,oBAAC;AAAD,CAAC,AA7BD,IA6BC;AAED,IAAM,IAAI,GAAG,cAAO,CAAC,CAAC;AAEtB;IACE,8BAAoB,OAAgB,EAAE,KAAuB;QAAzC,YAAO,GAAP,OAAO,CAAS;QAClC,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;IACvC,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAChD,CAAC;IACI,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,wBAAwB;iBACnC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,mCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,OAAO,GAAG;QACjB,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,CAAC;IACF,2BAAC;AAAD,CAAC,AAlBD,IAkBC","sourcesContent":["import {\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy\n} from '@angular/core';\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from \"./overlay.service\";\n\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\n\nexport class OverlayDialogBoundary {\n  constructor(el: ElementRef, dialogRef: DialogRef<any>) {\n    if (dialogRef && el.nativeElement) {\n      dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[overlayDialogBoundary]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: DialogRef, },\n];\n}\n\n\nexport class OverlayTarget implements OnDestroy {\n   set targetKey(value: string) {\n    this._targetKey = value;\n    if (value) {\n      vcRefStore.setVCRef(value, this.vcRef);\n    }\n  }\n\n  private _targetKey: string;\n\n  constructor(private vcRef: ViewContainerRef) {}\n\n  ngOnDestroy() {\n    if (this._targetKey) {\n      vcRefStore.delVCRef(this._targetKey, this.vcRef);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[overlayTarget]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'targetKey': [{ type: Input, args: ['overlayTarget', ] },],\n};\n}\n\nconst noop = () => {};\n\nexport class DefaultOverlayTarget implements OnDestroy {\n  constructor(private overlay: Overlay, vcRef: ViewContainerRef) {\n    overlay.defaultViewContainer = vcRef;\n  }\n\n  ngOnDestroy() {\n    this.overlay.defaultViewContainer = undefined;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[defaultOverlayTarget]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Overlay, },\n{type: ViewContainerRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}