{"version":3,"file":"js-native-modal-renderer.js","sourceRoot":"","sources":["../../../../src/components/angular2-modal/plugins/js-native/js-native-modal-renderer.ts"],"names":[],"mappings":"OAAO,EAGL,UAAU,EACX,MAAM,eAAe;OAEf,EACL,YAAY,EAIb,MAAM,uCAAuC;AAG9C;IAAA;IAqCA,CAAC;IAnCC,sCAAM,GAAN,UAAO,MAAsB,EAAE,KAAuB;QAEpD,IAAI,MAAwB,CAAC;QAC7B,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAClC,KAAK,YAAY,CAAC,KAAK;gBACrB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACrC,MAAM,GAAG,IAAI,CAAC;gBACd,KAAK,CAAC;YACR,KAAK,YAAY,CAAC,MAAM;gBACtB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC7E,KAAK,CAAC;YACR,KAAK,YAAY,CAAC,OAAO;gBACvB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAChD,KAAK,CAAC;QACV,CAAC;QAED,MAAM,CAAC,OAAO,GAAG;QACjB,CAAC,CAAC;QAEF,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QAED,qFAAqF;QACrF,gFAAgF;QAChF,MAAM,CAAC,EAAS,CAAC;IACnB,CAAC;IACI,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,oCAAc,GAA6D,EACjF,CAAC;IACF,4BAAC;AAAD,CAAC,AArCD,IAqCC","sourcesContent":["import {\n  ViewContainerRef,\n  ComponentRef,\n  Injectable\n} from '@angular/core';\n\nimport {\n  DROP_IN_TYPE,\n  DialogRef,\n  OverlayRenderer,\n  ModalOverlay\n} from '../../../../components/angular2-modal';\n\n\nexport class JSNativeModalRenderer implements OverlayRenderer {\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef): ComponentRef<ModalOverlay> {\n\n    let result: string | boolean;\n    switch (dialog.context.dialogType) {\n      case DROP_IN_TYPE.alert:\n        window.alert(dialog.context.message);\n        result = true;\n        break;\n      case DROP_IN_TYPE.prompt:\n        result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n        break;\n      case DROP_IN_TYPE.confirm:\n        result = window.confirm(dialog.context.message);\n        break;\n    }\n\n    dialog.destroy = () => {\n    };\n\n    if (result === false) {\n      dialog.dismiss();\n    } else {\n      dialog.close(result);\n    }\n\n    // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n    // so we resolve an empty promise, the user of this renderer should expect that.\n    return {} as any;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}